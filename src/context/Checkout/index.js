// @ts-check

/**
 * This file is part of the BlockLotto core functionality.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes to this file may cause unexpected behavior.
 * Please consult the project maintainers before making modifications.
 */

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useCashTab } from '../CashTab';
import { useApp } from '../App';
import { getWalletState } from '../../utils/cashMethods';
import BigNumber from 'bignumber.js';
import usePayment from './hooks/usePayment';
import useKYC from './hooks/useKYC';
import useTermsAndEmail from './hooks/useTermsAndEmail';
import useInitialLoad from './hooks/useInitialLoad';

const ticketPrice = 10;

export const CheckoutContext = createContext({});

export const CheckoutProvider = ({ children }) => {
    const { ticketQuantity, setTicketQuantity, setTicketsToRedeem, etokenTimeout } = useApp();

    // find ticket indicator
    const { wallet, forceWalletUpdate, addIssueTxs } = useCashTab();
    const { tickets, slpBalancesAndUtxos } = getWalletState(wallet);
    const token = slpBalancesAndUtxos.tokens?.[0];
    const maxEtokenTicketQuantity = token
        ? Math.floor(new BigNumber({...token.balance, _isBigNumber: true}).dividedBy(100 * ticketPrice).toNumber())
        : 0;

    // states
    const [isFirstRendering, setFirstRendering] = useState(true);
    const [hasAgreed, setHasAgreed] = useState(false);
    const [ticketIssued, setTicketIssued] = useState(false);
    const [paymentProcessor, setPaymentProcessor] = useState("NMIC");
    const [isKYCed, setIsKYCed] = useState(false);
    const [kycConfig, setKycConfig] = useState(false);
    const [paymentRequest, setPaymentRequest] = useState(false);
    const [paymentMetadata, setPaymentMetadata] = useState(false);
    const [showPaymentForm, setShowPaymentForm] = useState(false);
    const [ticketQtyError, setTicketQtyError] = useState(false);
    const [kycAccessToken, setKycAccessToken] = useState(false);
    const [emailError, setEmailError] = useState(false);
    const [countryError, setCountryError] = useState(false);
    const [hasEmail, setHasEmail] = useState(false);
    const [showKyc, setShowKyc] = useState(false);
    const [authPayment, setAuthPayment] = useState(false);
    const [kycCancelCount, setKycCancelCount] = useState(0);
    const [nmiCheckoutVariant, setNmiCheckoutVariant] = useState("lightbox");
    const [paymentEvent, setPaymentEvent] = useState(false);

    // update wallet when checkout begins
    useEffect(() => {
        if (!etokenTimeout)
            forceWalletUpdate();
    }, [])

    useInitialLoad(tickets, setHasEmail, setIsKYCed);

    // launch credit card payment in case of direct call
    useEffect(() => {
        if (paymentEvent && paymentRequest && showPaymentForm) {
            initiatePayment(paymentEvent);
        }
    }, [paymentEvent, paymentRequest, showPaymentForm])

    const {
        sendPayment,
        capturePayment,
        initiatePayment,
        handleNmiResult,
        handlePayment,
    } = usePayment({
        authPayment,
        ticketQuantity,
        paymentProcessor,
        paymentMetadata,
        paymentRequest,
        slpBalancesAndUtxos,
        ticketIssued,
        isKYCed,
        maxEtokenTicketQuantity,
        setPaymentRequest,
        setTicketIssued,
        setAuthPayment,
        setKycAccessToken,
        setShowKyc,
        setPaymentMetadata,
        setTicketQtyError,
        setShowPaymentForm,
        setTicketsToRedeem,
        setPaymentProcessor,
        setPaymentEvent
    })

    const {
        handleKYCandCapture
    } = useKYC({
        authPayment,
        kycConfig,
        sendPayment,
        kycCancelCount,
        paymentProcessor,
        kycAccessToken,
        capturePayment,
        setKycCancelCount,
        setShowKyc,
        setKycConfig,
    })

    const { handleAgree, handleSubmitAccount } = useTermsAndEmail({
        hasAgreed,
        setHasAgreed,
        setFirstRendering,
        setEmailError,
        setCountryError,
        setHasEmail,
    });

    return (
        <CheckoutContext.Provider value={{
            hasAgreed,
            hasEmail,
            showPaymentForm,
            ticketQtyError,
            emailError,
            countryError,
            showKyc,
            ticketQuantity,
            paymentProcessor,
            maxEtokenTicketQuantity,
            ticketPrice,
            handleAgree,
            handleKYCandCapture,
            handlePayment,
            handleSubmitAccount,
            initiatePayment,
            handleNmiResult,
            setTicketQuantity,
            setShowPaymentForm,
        }}>
            {children}
        </CheckoutContext.Provider>
    );
};

export const useCheckout = () => {
    const context = useContext(CheckoutContext);
    if (!context) {
        throw new Error("useCheckout must be used within a CheckoutProvider");
    }
    // @ts-ignore
    return context;
};


/**
 * NMI Checkout component for embedding CollectJS payment fields.
 *
 * @param {Object} props - Component props
 * @param {'lightbox' | 'inline'} [props.variant='lightbox'] - The CollectJS variant to use: 'lightbox' opens a modal; 'inline' embeds fields directly.
 * @param {Object.<string, string>} [props.customCss] - Custom CSS styles to apply to the embedded CollectJS fields. 
 * You can pass any valid CSS property name in kebab-case (e.g. 'font-size', 'background-color').
 */
export { NMICheckout } from './components/NMICheckout';